---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 6/15/2024 2:10 AM
---
require('util')
local enemy_data = require('__advanced_target_priorities__/gui/enemy_data')

local can_override_by_register_call = {
    enemyracemanager = true
}

local TargetPriorityAttachment = {
    root_name = "advanced_target_priority_attachment",
    top_section = "advanced_target_priority_top",
    main_section = "advanced_target_priority_main",
    section_list = "advanced_target_priority_section",
    section_selector = "advanced_target_priority_section_selector",
    section_selector_obj = nil,
    type_list = {
        size = "advanced_target_priority_size",
        unit_type = "advanced_target_priority_unit_type",
        variant = "advanced_target_priority_variant",
        tier = "advanced_target_priority_tier",   
    },
    apply_button = "advanced_target_priority_apply",
    preset_label = "advanced_target_priority_preset_label",
    preset_label_field = nil,
    clear_button = "advanced_target_priority_clear",
    default_preset = "Default",
}

local function get_values(tbl)
    local keys = {}
    for _, value in pairs(tbl) do
        table.insert(keys, value)
    end
    return keys
end

local function generate_combinations(categories, current_combo, index, result, dataset)
    if index > #categories then

        local final_name = ''
        local delimiter = ''
        for index, token in pairs(current_combo) do
            delimiter = dataset.delimiter
            if dataset.option_delimiters and dataset.option_delimiters[index] then
                delimiter = dataset.option_delimiters[index]
            end
            final_name = final_name .. token .. delimiter
        end
        result[#result + 1] = string.sub(final_name,1,#final_name - #delimiter)
        return
    end

    local values = get_values(categories[index])

    for _, value in pairs(values) do
        current_combo[#current_combo + 1] = value
        generate_combinations(categories, current_combo, index + 1, result, dataset)
        current_combo[#current_combo] = nil
    end
end

local function add_prefix_suffix(name, dataset)
    local final_name = name
    if dataset.prefix then
        final_name = dataset.prefix .. dataset.delimiter .. final_name
    end
    if dataset.suffix then
        final_name = final_name  .. dataset.delimiter .. dataset.suffix
    end
    return final_name
end

local function format_data_set(dataset, data)
    local options = {}
    for index, type in pairs(dataset.option_titles) do
        options[index] = {}
        if data[type] then
            for name, _ in pairs(data[type]) do
                if data[type][name] then
                    table.insert(options[index], name)
                end
            end
        end
    end
    return options
end

local function render_section(frame, data, player)
    local section_flow = frame.add {
        type = "flow", name = TargetPriorityAttachment.section_list,  direction="vertical"
    }
    section_flow.style.right_margin = 10
    section_flow.style.width = 180
    section_flow.style.height = 305
    section_flow.add { type = "label", caption = { "gui-target-attachment.section_title" } }
    local section_selctor = section_flow.add {
        type = "list-box",
        name = TargetPriorityAttachment.section_selector,
    }
    section_selctor.items = data
    local player_data = storage.target_priority_player_data[player.index]
    section_selctor.selected_index = player_data.selected_index or 1
    TargetPriorityAttachment.section_selector_obj = section_selctor
end

local function render_list(frame, type, data, player, columns)
    local flow = frame.add {
        type = "flow", name = TargetPriorityAttachment.type_list[type],  direction="vertical"
    }
    flow.style.minimal_width = 100
    flow.style.right_margin = 10
    flow.add { type = "label", caption = { "gui-target-attachment."..type.."_title" } }
    local player_data = storage.target_priority_player_data[player.index]
    local checkbox_data = player_data.checkbox_data[player_data.current_section]
    local datatable
    if columns and columns >= 2 then
        datatable = flow.add{type = "table", column_count = columns}
    end
    for _, item in pairs(data) do
        local state = false
        if checkbox_data and 
            checkbox_data[type] and 
            checkbox_data[type][item] 
        then
            state = checkbox_data[type][item]
        end
        if datatable then
            datatable.add {
                type = "checkbox",
                name = type..'_'..item,
                tags = {type=type, name=item},
                state = state,
                caption = item
            }
        else
            flow.add {
                type = "checkbox",
                name = type..'_'..item,
                tags = {type=type, name=item},
                state = state,
                caption = item
            }            
        end

    end
end


local function render_lists(frame, data, player, columns)
    if data['unit_type'] then
        render_list(frame, 'unit_type', data['unit_type'], player, columns)
    end
    if data['size'] then
        render_list(frame, 'size', data['size'], player)
    end
    if data['tier'] then
        render_list(frame, 'tier', data['tier'], player)
    end
    if data['variant'] then
        render_list(frame, 'variant', data['variant'], player)
    end
end

local function clear_targets(turret)
    local tindex = 1
    local kill = false
    repeat
        if pcall(turret.get_priority_target, tindex)  then
            turret.set_priority_target(tindex, nil)
            tindex = tindex + 1
        else
            kill = true
        end
    until kill
end

local function cache_prototypes()
    local cached_data = {}
    local prototype_get_entity_filtered =  prototypes.get_entity_filtered
    for section, sdata in pairs(storage.target_priority_data) do
        local dataset = storage.target_priority_data[section]
        local format_options = {}
        for tindex ,tdata in pairs(sdata.option_titles) do
            format_options[tindex] = {}
            for oindex ,odata in pairs(sdata.options[tindex]) do
                table.insert(format_options[tindex], odata)
            end            
        end
        local namelist = {}
        generate_combinations(format_options, {}, 1, namelist, dataset)

        for index, name in pairs(namelist) do
            local final_name = add_prefix_suffix(name, dataset)
            local entities = prototype_get_entity_filtered({{
                                                                 filter = "name",
                                                                 name = final_name
                                                             }})
            if entities and entities[final_name] then
                local entity = entities[final_name]
                cached_data[final_name] = {
                    entity = entity,
                    health = entity.get_max_health(),
                }
            else
                log('Advance target priorities: invalid prototype: '..final_name)
            end
        end
    end
    local num_key_data = {}
    local i = 1
    for _, data in pairs(cached_data) do
        num_key_data[i] = data
        i = i + 1 
    end
    table.sort(num_key_data, function(a, b)
        return a.health > b.health
    end)

    for index, data in pairs(num_key_data) do
        cached_data[data.entity.name].order = index
    end
    
    storage.prototype_data = cached_data
end


function TargetPriorityAttachment.init()
    storage.target_priority_data = enemy_data
    for interface_name, functions in pairs(remote.interfaces) do
        if functions["advanced_target_priorities_register_section_data"] then
            local dataset = remote.call(interface_name, "advanced_target_priorities_register_section_data")
            for _, data in pairs(dataset) do
                local set_data = true
                if not data.name or not data.delimiter or not data.options or not data.option_titles then
                    error("[advanced_target_priorities_register_section_data] Missing required data attributes. Caused:"..interface_name)
                end
                if storage.target_priority_data[data.name] ~= nil and not can_override_by_register_call[interface_name] then
                    log("[advanced_target_priorities_register_section_data] Section name has already in use, ignoring... Caused:"..interface_name)
                    set_data = false
                end

                if set_data then
                    storage.target_priority_data[data.name] = data
                end
            end
        end

        if functions["advanced_target_priorities_insert_section_data"] then
            local dataset = remote.call(interface_name, "advanced_target_priorities_insert_section_data")
            for _, record in pairs(dataset) do
                if not record.section or not record.option_title or not record.option then
                    error("[advanced_target_priorities_insert_section_data] Missing data attributes. Caused:"..interface_name)
                end

                if storage.target_priority_data[record.section] then
                    local section = storage.target_priority_data[record.section]
                    local target_index = nil
                    for index, option_title in pairs(section.option_titles) do
                        if option_title == record.option_title then
                            target_index = index
                            break
                        end
                    end

                    if target_index then
                        local can_update = true
                        for _, option in pairs(section.options[target_index]) do
                            if option == record.option then
                                can_update = false
                                break
                            end
                        end

                        if can_update then
                            table.insert(storage.target_priority_data[record.section].options[target_index], record.option)
                        end
                    end
                end 
            end
        end
    end

    storage.target_priority_player_data = storage.target_priority_player_data or {}
    storage.target_priority_presets = storage.target_priority_presets or {}
    
    storage.prototype_data = {}
    cache_prototypes()
end

function TargetPriorityAttachment.init_player_values(player_index)
    storage.target_priority_player_data[player_index] = storage.target_priority_player_data[player_index] or {
        --- format: checkbox_data[section][type][name] = true
        checkbox_data = {},
        current_section = 'biters',
        preset = TargetPriorityAttachment.default_preset
    }

    storage.target_priority_presets[player_index] = storage.target_priority_presets[player_index] or {
        [TargetPriorityAttachment.default_preset] = {
            name = TargetPriorityAttachment.default_preset,
            checkbox_data = {}
        }
    }

    if DEBUG_MODE then
        storage.target_priority_presets[player_index]["DEMO 1"] = 
                {
                    name = "DEMO 1",
                    checkbox_data = {}
                }
        storage.target_priority_presets[player_index]["DEMO 2"] =
        {
            name = "DEMO 2",
            checkbox_data = {}
        }
        storage.target_priority_presets[player_index]["DEMO 3"] =
        {
            name = "DEMO 3",
            checkbox_data = {}
        }        
    end
end

function TargetPriorityAttachment.show(player)
    TargetPriorityAttachment.hide(player)
    
    local gui = player.gui.relative

    local anchor = {gui=defines.relative_gui_type.turret_gui, position=defines.relative_gui_position.bottom}
    local container = gui.add{
        type = "frame",
        name = TargetPriorityAttachment.root_name,
        direction="vertical",
        anchor = anchor,
    }
    container.style.vertically_stretchable = false
    
    local top_horizontal = container.add { 
        type = "flow", 
        name = TargetPriorityAttachment.top_section,  
        direction="horizontal" 
    }
    local title = top_horizontal.add { type = "label", caption = { "gui-target-attachment.title" } }
    title.style.right_margin = 20
    
    top_horizontal.add { 
        type = "button", 
        name = TargetPriorityAttachment.apply_button, 
        caption = { "gui-target-attachment.apply" }, 
        style = "green_button",  
        tooltip = { "gui-target-attachment.apply-tooltip"}
    }
    local active_label = storage.target_priority_player_data[player.index].preset or TargetPriorityAttachment.default_preset
    local preset_label = top_horizontal.add { 
        type = "label", 
        name = TargetPriorityAttachment.preset_label, 
        caption = { "gui-target-attachment.preset_label", active_label }, 
        tooltip = { "gui-target-attachment.preset_label_tooltip" },
        style = 'clickable_label'
    }
    preset_label.style.left_margin = 35
    preset_label.style.right_margin = 35
    preset_label.style.width = 400
    TargetPriorityAttachment.preset_label_field = preset_label
    
    top_horizontal.add { 
        type = "button", 
        name = TargetPriorityAttachment.clear_button, 
        caption = { "gui-target-attachment.clear" }, 
        style = "red_button",
        tooltip = { "gui-target-attachment.clear-tooltip"}
    }
    
    local main_horizontal = container.add { type = "flow", name = TargetPriorityAttachment.main_section,  direction="horizontal" }

    local sections = {}
    for name, data in pairs(storage.target_priority_data) do
        table.insert(sections, name)
    end

    local default_section = storage.target_priority_player_data[player.index].current_section
    local dataset = storage.target_priority_data[default_section]
    local formatted_options = {}
    for index, options in pairs(dataset.options) do
        formatted_options[dataset.option_titles[index]] = options
    end
    
    render_section(main_horizontal, sections, player)
    render_lists(main_horizontal, formatted_options, player, dataset.unit_type_columns)
end

function TargetPriorityAttachment.hide(player)
    if player.gui.relative[TargetPriorityAttachment.root_name] then
        player.gui.relative[TargetPriorityAttachment.root_name].destroy()
    end
end

function TargetPriorityAttachment.refresh_preset(player_index)
    local active_label = storage.target_priority_player_data[player_index].preset
    TargetPriorityAttachment.preset_label_field.caption = { "gui-target-attachment.preset_label", active_label }
end

function TargetPriorityAttachment.refresh_list(list_element, selected_index, player_index)
   local main_parent_element = list_element.parent.parent
   local selected_section =  list_element.items[selected_index]

    for _, element in pairs(main_parent_element.children) do
        if element.name ~= TargetPriorityAttachment.section_list then
            element.destroy()
        end
    end

    local player_data =  storage.target_priority_player_data[player_index]
    player_data.current_section = selected_section
    player_data.selected_index = player_index


    local dataset = storage.target_priority_data[selected_section]
    local formatted_options = {}
    for index, options in pairs(dataset.options) do
        formatted_options[dataset.option_titles[index]] = options
    end
    render_lists(main_parent_element, formatted_options, game.players[player_index], dataset.unit_type_columns)
end

function TargetPriorityAttachment.apply(player)
    local player_data = storage.target_priority_player_data[player.index]
    local turret = player_data.turret
    if turret and turret.valid then
        local checkbox_data = player_data.checkbox_data
        local turret_index = 1
        if checkbox_data then
            
            clear_targets(turret)
            local prototype_data = storage.prototype_data
            local sorted_names = {}
            
            for section, cbdata in pairs(checkbox_data) do
                local dataset = storage.target_priority_data[section]
                local format_options = format_data_set(dataset, cbdata)

                local namelist = {}
                generate_combinations(format_options, {}, 1, namelist, dataset)
                
                for index, name in pairs(namelist) do
                    local final_name = add_prefix_suffix(name, dataset)
                    if prototype_data[final_name] then
                        table.insert(sorted_names, prototype_data[final_name])
                    end
                end
            end

            if sorted_names then
                table.sort(sorted_names, function(a, b)
                    return a.order < b.order
                end)
                for idx, item in pairs(sorted_names) do
                    turret.set_priority_target(turret_index, item.entity.name)
                    turret_index = turret_index + 1
                end
            end
        end
        
        storage.target_priority_presets[player.index][player_data.preset].checkbox_data = util.table.deepcopy(checkbox_data)
    end
end

function TargetPriorityAttachment.update_filter_list(player, tags, state)
    local player_data = storage.target_priority_player_data[player.index]
    if tags.type and tags.name then
        local checkbox_data = player_data.checkbox_data
        local current_section = player_data.current_section
        checkbox_data[current_section] = checkbox_data[current_section] or {}
        checkbox_data[current_section][tags.type] = checkbox_data[current_section][tags.type] or {}
        checkbox_data[current_section][tags.type][tags.name] = state
    end
end

function TargetPriorityAttachment.clear(player)
    local player_data = storage.target_priority_player_data[player.index]
    local turret = player_data.turret
    if turret and turret.valid then
        clear_targets(turret)
    end
    storage.target_priority_player_data[player.index].checkbox_data = {}
    storage.target_priority_presets[player.index][player_data.preset].checkbox_data = {}
end


return TargetPriorityAttachment